// Mock API service for alerts

// Load alerts with filtering and pagination
export const loadAlerts = async (params) => {
  // Simulate API delay
  await new Promise(resolve => setTimeout(resolve, 500));
  
  // Mock data
  const mockAlerts = [
    {
      id: 'ALT-001',
      type: 'velocity_fraud',
      title: 'Velocity Fraud Detected',
      description: 'Product scanned in multiple locations within impossible timeframe',
      product_id: 'PROD-12345',
      product_name: 'iPhone 14 Pro',
      risk_score: 95,
      status: 'new',
      timestamp: '2024-07-04T14:30:00Z',
      location: 'New York, NY',
      details: {
        scan_locations: ['New York, NY', 'Los Angeles, CA'],
        time_difference: '2 hours',
        distance: '2,445 miles'
      }
    },
    {
      id: 'ALT-002',
      type: 'geographic_fraud',
      title: 'Geographic Anomaly',
      description: 'Product appeared in unexpected location',
      product_id: 'PROD-67890',
      product_name: 'Samsung Galaxy S23',
      risk_score: 75,
      status: 'investigating',
      timestamp: '2024-07-04T13:15:00Z',
      location: 'Miami, FL',
      details: {
        expected_location: 'Atlanta, GA',
        actual_location: 'Miami, FL',
        supply_chain_deviation: true
      }
    },
    {
      id: 'ALT-003',
      type: 'cluster_fraud',
      title: 'Cluster Fraud Pattern',
      description: 'Multiple failed verifications at single location',
      product_id: 'PROD-11111',
      product_name: 'MacBook Pro',
      risk_score: 85,
      status: 'resolved',
      timestamp: '2024-07-04T12:00:00Z',
      location: 'Chicago, IL',
      details: {
        failed_scans: 15,
        store_id: 'WM-4567',
        time_window: '2 hours'
      }
    }
  ];
  
  // Apply filters
  let filteredAlerts = mockAlerts;
  
  if (params.status) {
    filteredAlerts = filteredAlerts.filter(alert => alert.status === params.status);
  }
  
  if (params.search) {
    const searchLower = params.search.toLowerCase();
    filteredAlerts = filteredAlerts.filter(alert => 
      alert.title.toLowerCase().includes(searchLower) ||
      alert.product_name.toLowerCase().includes(searchLower) ||
      alert.location.toLowerCase().includes(searchLower)
    );
  }
  
  // Apply sorting
  if (params.sortBy && params.sortOrder) {
    filteredAlerts.sort((a, b) => {
      let comparison = 0;
      
      if (params.sortBy === 'timestamp') {
        comparison = new Date(a.timestamp) - new Date(b.timestamp);
      } else if (params.sortBy === 'risk_score') {
        comparison = a.risk_score - b.risk_score;
      }
      
      return params.sortOrder === 'desc' ? -comparison : comparison;
    });
  }
  
  return {
    alerts: filteredAlerts,
    totalAlerts: filteredAlerts.length,
    totalPages: Math.ceil(filteredAlerts.length / params.limit),
    currentPage: params.page
  };
};

// Load alert statistics
export const loadAlertStats = async () => {
  // Simulate API delay
  await new Promise(resolve => setTimeout(resolve, 500));
  
  return {
    total_alerts: 127,
    new_alerts: 8,
    investigating_alerts: 15,
    resolved_alerts_24h: 23,
    by_status: {
      new: 8,
      investigating: 15,
      resolved: 89,
      dismissed: 15
    },
    by_type: {
      velocity_fraud: 45,
      geographic_fraud: 32,
      cluster_fraud: 28,
      anomaly_detection: 22
    }
  };
};

// Get alert details
export const getAlertDetails = async (alertId) => {
  // Simulate API delay
  await new Promise(resolve => setTimeout(resolve, 500));
  
  // Mock alerts data
  const alerts = [
    {
      id: 'ALT-001',
      type: 'velocity_fraud',
      title: 'Velocity Fraud Detected',
      description: 'Product scanned in multiple locations within impossible timeframe',
      product_id: 'PROD-12345',
      product_name: 'iPhone 14 Pro',
      risk_score: 95,
      status: 'new',
      timestamp: '2024-07-04T14:30:00Z',
      location: 'New York, NY',
      history: [
        {
          timestamp: '2024-07-04T14:30:00Z',
          action: 'created',
          user: 'AI System',
          notes: 'Alert automatically generated by VeriCart AI'
        },
        {
          timestamp: '2024-07-04T14:35:12Z',
          action: 'assigned',
          user: 'John Smith',
          notes: 'Assigned to Fraud Prevention Team'
        }
      ],
      related_scans: [
        {
          id: 'SCAN-45678',
          timestamp: '2024-07-04T10:30:00Z',
          location: 'New York, NY',
          device_id: 'DEV-123',
          status: 'verified'
        },
        {
          id: 'SCAN-45679',
          timestamp: '2024-07-04T12:30:00Z',
          location: 'Los Angeles, CA',
          device_id: 'DEV-456',
          status: 'failed'
        }
      ],
      analysis: {
        probability: 0.94,
        factors: [
          'Impossible travel speed (725 mph)',
          'Previously flagged device',
          'Suspicious scan pattern'
        ],
        recommendation: 'Immediate investigation required'
      }
    }
  ];
  
  return alerts.find(alert => alert.id === alertId) || null;
};

// Update alert status
export const updateAlert = async (alertId, newStatus, notes) => {
  // Simulate API delay
  await new Promise(resolve => setTimeout(resolve, 500));
  
  // In a real app, you would make an API call here
  return {
    success: true,
    message: `Alert ${alertId} updated to status ${newStatus}`
  };
};
